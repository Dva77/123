js运行在客户端的脚本语言（不需要编译）由js引擎逐步解释并执行

 js的组成 ECMAScript DOM BOM

三种书写方式
                     <head>里面是内嵌
可以将多行js代码写到<script>标签中
-------------常用
                     <body>里面是行内
可以将单行或者少量js代码写在HTML标签的事件属性中（以on开头的属性）
注意单双引号的使用：HTML中使用双引号，js中使用单引号
--------------不推荐使用
                     创建一个.JS的文件是外部
引用<script stc="   .js"></script>
-------------适用于js代码多的情况

输出语句
prompt('    ')输入框
alert('   ')警示框 输出展示给用户
console.log('     ') 控制台打印输出 给程序员测试用的

变量
一个存放数据的容器，我们通过变量名获取数据，甚至修改数据

本质：程序在内存中申请一块来存放数据的空间

1.声明变量
var 变量名;
2.赋值
=右赋左

初始化：声明一个变量并赋值

更新变量
变量值以最后一次赋的为准

同时声明多个变量
var age=18,
      address='---',
      gz=2000;

声明变量的特殊情况

只声明不赋值  结果是 undfined
不声明只赋值 结果是 可以使用

命名规范
字母、下划线、美元符号 开头
区分大小写
不能以数字开头
不能是 关键字和保留字
遵循驼峰命名法 首字母小写，后面单词首字母大写
（name不要用成变量名）

数据类型
js是动态语言，变量的数据类型可以变化
js的变量数据类型是只有程序在运行过程中，根据等号右边的值来确定的

简单数据类型

number（包括整数和浮点数
八进制 0开头
十六进制 0x开头
范围：Number.MAX_VALUE最大值
          Number.MAX_VALUE最小值
三个特殊值：Infinity无穷大
                    -Infinity无穷小
                    NaN代表一个非数值
isNaN() 这个方法用来判断是否是非数字，是返回false，不是返回true。

string 

可以是双引号可以是单引号（推荐单引号
转义字符：换行\n（要写到引号里面

检测获取字符串的长度 length
var strmsg = "=====";
alert(strmsg.length);

字符串的拼接
字符串+任意类型=拼接之后的新字符串

boolean
布尔判断真假
参与计算true当1
             false当0

undefined声明了没有给值，未定义（undfined和数字相加结果为NaN

null空值 和数字相加当0

typeof 检测变量的数据类型（null是object
prompt取过来的值是字符型（string

！！数据类型的转化

转换为字符串类型
变量.toString（）

var num = 10;

var str = num.toString();

Srting()
console.log(String(num));

隐式转换  拼接字符串（最重要
console.log(num+' ');

！！转化为数字型(重点

parseInt（变量）可以把字符型转换为数字型 得到 整数(数字开头带单位去掉单位

var age = prompt('	请输入您的年龄');
console.log(parseInt(age));

parseFloat（变量）把字符型转换为浮点型

Number（变量）强制转换
console.log(Number('12'));

利用+ - * / 实现隐式转换
console.log('12'-0) 12

！转换为布尔型
Boolean（’‘）
除了  空格 0 null undefined NaN 转换为false，其余全部为true

运算符

算数运算符 加减乘除取余（避免用浮点数直接参与运算
一个数能被整除就是取余为0

表达式：数字、运算符、变量等组成的式子
返回值：右边表达式计算完毕把返回值返回给左边

递增和递减运算符 pinkjsp46
递增：num++（num=num+1，先返回原值，后自加）或者 ++num（num=num+1，先自加，后返回原值）单独使用效果一样
递减：num--或者--num 一样

比较运算符
<
>
>=
<=
!=
==判断两边值是否相等（注意隐式转换）
===绝对等于 判断两边的值和数据类型是否完全相同

逻辑运算符
&& 与
||或
！非

逻辑中断（短路
当有多个表达式，左边的表达式的值可以确定结果式，就不再继续运算右边表达式的值

逻辑与（&&的短路运算
1、表达式1为真则返回表达式2
2、表达式1为假则返回表达式1

逻辑或（||的短路运算
1、表达式1为真则返回表达式1
2、表达式1为假则返回表达式2

赋值运算符
=  右边赋左边
+=
-=

运算符优先级
（）
一元运算符 （++  --  ！
算数运算符（先乘除后加减
关系运算符（> >= < <=
相等运算符（== != === !==
逻辑运算符（先&&后||
赋值运算符（=
逗号运算符（，

流程控制
顺序结构（先后顺序，依次执行
分支结构（if switch

三元表达式（条件表达式？表达式1：表达式2）如果条件为真返回表达式1，为假返回表达式2。

switch针对特定值使用 匹配 数据类型和值都得一样
1、一边情况下 if else和switch可以相互切换
2、switch语句通常处理case值比较确定的情况，而if else 语句更为灵活，常用于范围判断
3、switch语句进行条件判断后直接执行到程序的条件语句，效率更高。而if else 语句有几种条件，就得多判断几次
4、当分支比较少的时候，if else的执行效率比switch高
5、当分支比较多的时候，switch的执行效率比较高，而且结构清晰


循环结构（重复执行某些代码

for循环，跟计数有关系
for（初始化变量；条件表达式；操作表达式）{
    循环体
}
初始化变量：var声明的普通变量
条件表达式：决定每一次循环是否继续执行
操作表达式：每次循环最后执行的代码，经常用于更新计数器变量（递增或者递减

断点调试    （sources                

嵌套循环，外层循环执行一次，内层循环执行全部

while循环
while（条件表达式）{
     循环体
}

当条件表达式为true则执行循环体，否则，退出循环
适用于比较复杂的条件判断

do while 循环
do{
    循环体
}while（条件表达式）
先执行一次循环体再判断条件，满足条件，则继续执行循环体，否则，退出循环

continue 是退出本层循环执行下一次
break是退出整个循环

数组（一组数据的集合，每个数据叫做元素，数组可以存放任意类型的元素

1、利用new创建数组
var数组名=new Array（）；
var arr = new Array（）；创建一个新的空数组
2、利用数组字面量创建数组 []
var arr = [];数组里的数据用，分隔 

（访问）获取数组中的元素

数组名[索引号]

所有（下标）：用来访问数组元素的序号（从0开始）

遍历数组（访问数组中的每个元素从头到尾

数组长度 （数组的长度是元素个数（数组名.length 动态监测数组元素的个数

数组新增元素 
1、通过修改length的长度（修改后没有给值，默认值是undefined
var arr = ['z','j','e'];
arr.length = 5;
2、增加数组元素（不要直接给数组名赋值 ，否则会覆盖以前的数据
var arr = [' t','y','z'];
arr[3] = 'j';

冒泡排序 （吧一系列的数据按照一定的顺序进行排列显示（从小到大或者从大到小）

函数（封装一段可以被重复调用执行的代码块，通过此代码块可以实现大量代码的重复使用

函数的使用

1、声明函数
function函数名（）{
    函数体
}

注意：
函数名一般是动词
函数不调用自己不执行
2、调用函数
函数名（）；

注意：
调用时不要忘记＋（）

参数：在函数内部不确定，可以通过参数在调用函数时传递不同的值进去

形参和实参(参数之间用，隔开

在声明函数的小括号里的是 形参
在调用函数的小括号里的是 实参

形参是接受实参的，相当于一个变量

形参和实参不匹配的问题
1、实参个数多于形参个数 取到形参个数
2、             小于             多余的形参定义为undefined，最终结果为 NaN

函数的返回值
return语句
function 函数名(){
   return 需要返回的结果；
}
函数名（）；
 1、函数只是实现某种功能，最终的结果需要返回给函数的调用者函数名（）通过return实现的
 2、只要函数

return终止函数
return语句之后的代码不会被执行
退出整个函数，返回return的值

return只能返回一个值，返回的是最后一个值

函数如果没有return就返回undefined


arguments的使用（arguments实际上它是当前函数的一个内置函数，arguments对象中储存了传递的所有实参

伪数组
1、具有数组length的属性
2、按照索引的方式进行存储
3、他没有真正数组的一些方法 pop（） push（）等等

函数可以调用另外一个函数

函数的两种声明方式
1、利用函数关键字自定义函数（命名函数）
2、函数表达式（匿名函数）
 var 变量名 = function（）{}

作用域
代码名字在某个范围内起作用效果，目的是提高程序的可靠性，更重要的是减少命名冲突

js的作用域： 全局作用域    局部作用域

全局作用域：整个script标签 或者一个单独的js文件
局部作用域（函数作用域）：在函数内部，这个代码名只在函数内部起作用

全局变量：在全局作用域下var声明的变量
   	如果在函数内部没有声明直接赋值的变量
（全局变量只有在浏览器关闭的时候才会销毁，比较占内存
局部变量：在局部作用域下的变量 函数内部的变量
 	形参
（局部变量 当我们程序执行完毕就会销毁，比较节约内存

js没有块级作用域（es6才有
块级作用域 {} 在{}里面写的都可以使用

作用域链
只要是代码就有一个作用域
根据内部函数可以访问外部函数里面的变量，采取链式查找方式来决定去哪个值，称之为作用域链（就近原则

预解析
js引擎会把js里面的所有 var 还有 function 提升到当前作用域的最前面

变量预解析（变量提升
就是把所有变量声明提升到当前作用域最前面，不提升赋值操作
函数预解析(函数提升
把函数声明提升到当前作用域的最前面，不调用函数

对象：一个具体的事物
对象由属性和方法组成的
属性：事物的特征，在对象用属性来表示（常用名词
方法：事物的行为，在对象中用方法表示（常用动词

保存一个人的完整信息（使用对象

创建对象的三种方法
1、字面量
2、new Object
3、构造函数

1、对象字面量：就是{}里面包含了飙到这个具体事物的属性和方法

var obj = {}；创建一个空对象
创建一个对象
 var obj = {
            uname:'zj',
            age:19,
            sex:'男',
            sayHi:function(){
                console.log('hi');
            }
        }
2、new Object

var obj = new Object（）；创建一个空对象
创建一个对象
  var obj = new Object();
        obj.uname = 'zj';
        obj.age = 19;
        obj.sex = '男';
        obj.sayHi= function(){
            console.log('hi');
        }
        console.log(obj.uname);
        obj.sayHi();
3、构造函数创建对象（由于前面的两种创建对象一次只能创建一个对象
     把对象里面一些相同的属性和方法抽象出来封装到函数里面

构造函数，如Star（），抽象了对象的公共部分，封装到函数里面
创建对象，如 new Star（），特指某一个，通过new创建对象的过程也称之为对象实例化

function 构造函数名（）{
        this.函数 = 值；
        this.方法 = function（）{}
}
new 函数构造名（）；

1、构造函数名首字母必须大写
2、构造函数不需要return 就可以返回结果
3、我们调用函数必须使用new
4、我们只要new Star（）调用函数就创建了一个对象
      
new关键字执行过程
1、new构造函数可以在内存中创建一个空的对象
2、this就会指向刚才创建的空对象
3、执行构造函数里面的代码 给这个空对象添加属性和方法
4、返回这个对象

使用对象

调用对象的属性 1、对象名.属性名
	        2、对象名['属性名']

调用对象的方法1、对象名.方法名（）

变量和属性的相同点 都是用来保存数据的

	    不同点 变量 （单独声明并复制 使用时直接写变量名 单独存在
   	               对象   (在对象里面不需要声明 使用的时候必须 是 对象.属性
函数和方法的相同点 都是实现某种功能 做某件事

不同点
函数是单独声明 并且调用的 函数名（）单独存在
方法 在对象里面 调用的时候 对象.方法（）

遍历对象
for（变量 in 对象）{

       } 
 for(var k in Star){
            console.log(k);//输出变量名
            console.log(Star[k]);//输出变量值
        }

对象是复杂数据类型 object
本质：一组无序的相关属性和方法的集合
构造函数泛指一大类，比如 苹果 不管是红苹果还是青苹果
对象实例就是特质一个事物，比如 特指红苹果

内置对象（math、string、data、array
是js语言自带的一些对象，共开发者使用，提供一些常用或者最基本的而必要的功能

利用对象封装自己的数学对象，里面有PI 最大值和最小值

随机数方法random（）
1、返回一个随机的小数 (0=<x<1)
2、这个方法不跟参数

日期对象
Date（） 是一个构造函数 必须使用new 来调用创建我们的日期对象
var arr = new Date（）；
括号里面不跟参数，返回系统当前时间
参数常用的写法 
数字型 2019，10，01 输出的时间会比规定的时间大
字符型’2019-10-1 8：8：8‘

格式化日期
getFullYear（）//返回当前日期的年
getMonth（）//当前月份（0-11）所以要＋1
getDate（）//当前 天
getDay（）//星期几
getHours（）//获取当前小时
getMinutes（）//获取当前分钟
getSecons（）//获取当前秒数

获取日期的总的毫秒形式（距离1970年1月1号过了多少毫秒（时间戳）
1、valueof（）gettime（）

var date = new Date();
cinsole.log(date.valueOf());

2、简单写法 
var date1 = +new Date（）；//最常用

3、H5新增的 获取总的毫秒数
console.log(Date.now());

倒计时核心算法：输入的时间减去现在的时间就是剩余的时间，即倒计时，但是不能拿着时分秒相减
用时间戳相减（再转换为时分秒

数组对象

判断是否为数组两种方式
instanceof
Array . is Array(参数)新增
console.log(Array.isArray(参数)）；

添加数组元素

1、push（）在数组的末尾 添加一个或者多个数组元素 （推
  	 var arr=[1,2,3];
   	 arr.push(4,5);
直接console.log(arr.push('zj',8));这样输出，返回的是数组的长度

2、unshift()在数组的开头 添加一个或者多个数组元素 
直接console.log(arr.unshift('zj',8));这样输出，返回的是数组的长度

删除数组元素

pop（）没有参数
1、pop（）删除数组最后一个元素
直接console.log(arr.pop());这样输出，返回的是删除的那个元素

2、shift（）删除数组第一个元素
shift（）删除第一个参数
直接console.log(arr.shift());这样输出，返回的是删除的那个元素

筛选数组

数组排序
1.翻转数组
    var arr=[1,2,3];
    arr.reverse();
    console.log(arr);
2.数组排序（冒泡排序）
    var arr =[4,3,7,1];
    arr.sort();
    console.log(arr);

这种只能给单位数进行排序

   var arr =[4,33,7,17];
    arr.sort(function(a,b){
        return a-b;//升序
        return b-a；//降序
    });
    console.log(arr);
这个行

获取数组索引方法

indexOf（） 数组中从前往后查找给定元素的索引（只返回第一满足条件的索引号
lastindexOf() 数组中从后往前元素的索引

如果不存在就返回-1

数组去重
核心算法：遍历旧数组，拿着旧数组元素去查询新数组，如果这个元素再新数组里面没有出现过，就添加
   function unique(arr)
    {
        var newarr=[];
        for(var i=0;i<arr.length;i++){
            if(newarr.indexOf(arr[i])===-1){
                newarr.push(arr[i]);
            }
        }
        return newarr;
    }
    var demo = unique(['z','z','j','k']);
    console.log(demo);

数组转化为字符串
1、tostring（） 将数组转化为字符串
2、join（分隔符）

    var arr=[1,2,3]
    console.log(arr);
    console.log(arr.toString());
    console.log(arr.join('&'));

字符串对象

基本包装类型（
1.简单数据类型包装成复杂数据类型（复杂数据类型才有属性和方法
var temp = new String('andy');
2.把临时变量给temp
var str = temp;
3.销毁这个零时变量
temp=null;

字符串不可变（里面的值是不会变得，只是地址变了，内存重新开辟了一个内存空间

根据字符返回位置
var str = '改革春风吹满地，春天来了'
    console.log(str.indexOf('春',3));//从索引号第三个开始查找

str.indexOf('要查找的数据 ',[开始的位置 ]);

求某个字符出现的位置以及个数

核心算法：先查找出第一个o出现的位置
然后，只要indexOf返回的结果不是-1，就继续往后查找，因为indexOf智能查找第一个，所以后面的查找，一定是当前索引加一，从而继续查找

拼接字符串
substr(start,length) 从start位置开始（索引号），length取得个数 用法： --.substr( , );

替换字符串
replace('字符','字符')   如果有相同的只替换第一个


字符转换为数组
split('分隔符')
 var str2 = 'red,pink,blue';
 console.log(str2.split(','));

null返回的是一个空的对象

webapi

API应用程序编程接口

Ｗｅｂ　ＡＰＩ　浏览器提供自讨操作浏览器功能和页面元素的ＡＰＩ

ＤＯＭ（可以通过ＤＯＭ接口可以改变网页的内容、结构和样式

ｄｏｍ　树
一个页面就是一个文档　使用ｄｏｃｕｍｅｎｔ表示
元素ｅｌｅｍｅｎｔ
节点（标签、属性、文本、注释等）ｎｏｄｅ

获取元素　document．～～～～
１、根据ＩＤ获取
使用　getElementById（）获得ｉｄ的元素，返回的是ｏｂｊｅｃｔ对象
console.dir()打印我们返回的元素对象　更好地查看属性和方法
２、根据标签名获取
使用getElementsByTagName()可以返回带有指定标签名的对象集合，以伪数组的形式储存
如果只有一个ｌｉ还是返回伪数组
如果ｌｉ中没有就返回ｕｎｄｅｆｉｎｅｄ
３、Ｈ５新增获取元素方式
根据类名返回元素对象集合document．getElementsByClassName(＇类名＇)
根据指定选择器返回第一个元素对象document．querySelector（＇选择器＇）
返回指定选择器的所有元素对象集合document．querySelectorAll（＇选择器＇）

获取body元素
document．body
获取HTML标签
document．documentElement

事件基础
触发－响应的一种机制

事件由　事件源　事件类型　事件处理程序　三部分组成

事件源是事件被触发的对象　按钮
事件类型　如何触发　什么事件　比如　鼠标点击　鼠标经过　键盘按下
事件处理程序　通过一个函数赋值的方式　完成
<button id="btn">唐伯虎</button>
    <script>
    var btn=document.getElementById('btn');
    btn.onclick = function(){
        alert("点秋香");
    }
    </script>

执行事件的步骤
１、获取事件源
２、注册事件
３、添加事件处理程序


操作元素

改变元素内容

element．innerText（从起始位置到终止位置的内容，但他去除ｈｔｍｌ标签（不识别），同时空格和换行也会被去掉
element．innerHTML（起始位置到终止位置的全部内容，包括ｈｔｍｌ标签（识别），同时保留空格和换行

修改表单元素

样式属性操作（修改元素的大小、颜色、位置等
行内样式操作　ｅｌｅｍｅｎｔ．ｓｔｙｌｅ
类名样式操作　element．className